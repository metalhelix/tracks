# PRODUCTION deployment notes

# Deployed to:
# host: Linux tracks.stowers.org 2.6.32-431.29.2.el6.x86_64 #1 SMP Tue Sep 9 21:36:05 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
# webserver: nginx runs as user nginx,
# application runs under wsgi as user 'deployer'.
# linux    user: deployer; password: c.f. /home/bioinfo/.passwords
# postgres user: deployer; password: c.f. /home/bioinfo/.passwords

# Required system packages installed by root/system-administrator:
# python, postgresql, nginx, uwsgi (recent source http://uwsgi-docs.readthedocs.org/en/latest/)

yum install python # if needed
sudo yum -y install nginx
pip install uwsgi 		# NB: which python/pip ?  TODO: confirm this should NOT be done inside the venv?
sudo yum -y install postgresql postgresql-devel 

## sqlite is used during development (i.e. when envirtonment variable
## PRODUCTION is unset).  Install it also on production server to
## enable testing/debugging.
sudo yum -y install sqlite-devel


# Start up web server:
# /usr/sbin/nginx -v
# nginx version: nginx/1.7.10	# 
sudo /sbin/service nginx start
#sudo /sbin/service nginx reload
# ps -eaf | grep nginx		# observe /etc/nginx/nginx.conf is config file and worker process running as user nginx

mkdir -p /etc/nginx/{sites-enabled,sites-available}
chown deployer sites-enabled sites-available

# create nginx.conf
# create /etc/nginx/sites-available/tracks
# TODO: put this under source control
# create symlinks from sites-available/tracks to sites-enabled/tracks

# configure logging locations (as declared in :
mkdir -p /etc/nginx/logs/nginx/tracks/log
mkdir -p /etc/nginx/logs/nginx/log
mkdir -p /etc/nginx/logs/domains/tracks/log/

# set up database
sudo -u postgres -s
/usr/local/pgsql/bin/createdb tracks
/usr/local/pgsql/bin/createuser -P deployer
GRANT ALL PRIVILEGES ON DATABASE tracks TO deployer;
\q

# modify /etc/init.d/uwsgi (TODO: as installed by ??? - apparently not
# by `yum install uwsgi`) with appropriate daemon configs: TODO: put
# this file under source control.
OWNER=deployer
NAME=uwsgi
DESC=uwsgi
TRACKS_WSGI=/microarray/tracks/tracks/wsgi.py
VENV=/home/deployer/venv/

DAEMON_OPTS="--socket 127.0.0.1:8001 --wsgi-file ${TRACKS_WSGI} -M -t 30 -p 16 -b 32768 -d /var/log/$NAME.log --pidfile /var/run/$NAME/$NAME.pid --uid $OWNER --home=${VENV} --stats 127.0.0.1:9191"
DAEMON_OPTS+=" --env PRODUCTION=1"  # this had been missing.

## install virtual env in deployer home
pip install --user virtualenv
cd $HOME
virtualenv venv
## activate the virtual python environment:
source ./venv/bin/activate
## install required packages INTO THE VIRTUAL ENVIRONMENT:
pip install -r requirements.txt
pip install psycopg2
pip install pysqlite		# needed when PRODUCTION is unset (developing and debugging)

## Set enviromental variables. NB: these are ONLY seen when django is run
## via `python manage.py runserver`, but are NOT visible to the
## services, which is instead controlled via ${DAEMON_OPTS} and ${TRACKS_WSGI}
PRODUCTION=1		 	# NB: anything not empty is understood as 'production'
# set python path
# THIS WAS NOT NEEDED: export PYTHONPATH=/microarray/tracks:$PYTHONPATH

## bring the database schema up-to-date with the django model - in
## case of initial deployment, `syncdb` creates the tables for the
## first time.
python manage.py syncdb
## NOTE: manage.py is basic django command-line administration tool -
## documented:
## https://docs.djangoproject.com/en/1.8/ref/django-admin/

## migrate previous tracks meta data (required changing the name of
## django model)
sed -i tracks_redirect.json s/redirect.redirecthit/roasted.redirecthit/g tracks.json
cat tracks_redirect.json | sed 's/redirect.redirecthit/roasted.redirecthit/g' | sed 's/redirect.target/roasted.target/g' > new_tracks.json

## Import previous tracks data into django (as had been exported (using dumpdata)
## from previous version of
## tracks database)
python manage.py loaddata ../new_tracks.json 

## (re)start services (note: uwsgi is not administered as root with
## sudo but rather as current user: 'deployer')
/etc/init.d/uwsgi start
sudo /sbin/service nginx restart

/etc/init.d/uwsgi stop; sudo /sbin/service nginx stop
/etc/init.d/uwsgi start; sudo /sbin/service nginx start

## add robots.txt to /microarray/robots/robots.txt which contains the following:
User-agent: *
Disallow: /


## DEBUGGING NOTES, LESSONS, CODE CHANGES, TASKS LEARNED

The following notes were taken while sleuthing the fix for the fact
that the url dispatch was not working on the deployed tracks server.

* The environment variable PRODUCTION must simply exist for
track.settings.production to be used; it need not be set to any
particular value (such as 1).  Any value will do.  Even the empty
string.  You MUST 'unset PRODUCTION' to run track.settings.dev.

* PRODUCTION was not being communicated to track.settings.  There are at
least two ways to do this, neither of which was happening.  I chose to
communicate it as an option to the call to wsgi made in the service
script via /etc/init.d/uwsgi which has it hardcoded to 1:

       DAEMON_OPTS+=" --env PRODUCTION=1"

Alternatively, it could be set in the file tracks/wsgi.py.  Putting
this option in the init.d file causes the service to always run in
PRODUCTION, which is desired on this server.  It also allows for
testing/non-production when application launched by `python manage.py`

* Similarly, DJANGO_SETTINGS_MODULE could be set in either the init.d
  service script, as:

	 DAEMON_OPTS+=" --env DJANGO_SETTINGS_MODULE=tracks.settings"

of in wsgi.py.  This latter is more appropriate - the setting is
intrinsic to the application and need never be changed depending on
production or testing/developing.

* uwsgi had been defined (changed?) to relocate the pidfile from
/var/run/uwsgi.pid to /var/run/uwsgi/uwsgi.pid.  Doing this
necessitated additional corresponding change, which was missing, for
how the daemon was invoked (or get errors logged in process
take-down), to include the --pifile option BEFORE the $prog:

  daemon --pidfile /var/run/$NAME/$NAME.pid $prog $DAEMON_OPTS

* manage.py had hard-coded track.settings.production.  no longer!
Rather, it now loads track.settings, which in turn dispatches on
PRODUCTION being set.  Not required to fix the issue, but identified
during debugging.

* file:requirements.txt appears not to have been fully sourced into
the activated virtual environment (i.e. in the same shell after having
run venv/bin/activate).  Jenny had started to identify missing modules
and add them to the system python - this was inconsistent with
deployment plan's use of venv.

* The addition (made by jenny?) of "--uid ${OWNER}" to the call to uswgi
in /etc/init.d/uswgi is probably (only) needed when the service is
started by root (such as on system boot), but NOT when started by user
deployer.  Sam and Malcolm, not being able to run it as root, have not
tested this yet.

* The /etc/nginx/sites-available/tracks configuration file had
rewrites which were interfering with url dispath in tracks.urls.py.  I
reversed the commenting on these two lines so that trailing slashes
are NOT removed.  TODO: what was the history of changes to this file;
was it changed for some other reason?  This was the crux of the issue.

  rewrite ^([^.]*[^/])$ $1/ permanent; # If the URI doesn't have a period and does not end with a slash, add a slash to the end
  # rewrite ^/(.+)/$ /$1 permanent; # remove trailing slash

TODO: source control this file.


## ADMINISTRATIVE TASKS

PRODUCTION=1 python manage.py runserver # run using tracks.settings.production (i.e. using postgres)
PRODUCTION= python manage.py runserver # run using tracks.settings.dev (i.e. using sqlite3)
PRODUCTION= python manage.py runserver --insecure # without which css are not loading - "allow serving static files even with DEBUG=True" (as set in settings.dev)

PRODUCTION=1 python manage.py syncdb

## move a copy of production data into development mysql
PRODUCTION=1 python manage.py dumpdata --indent 1 > dumpdata_PRODUCTION.json
PRODUCTION=  python manage.py loaddata dumpdata_PRODUCTION.json

## watch various logs:
tail -f /var/log/nginx/error.log /var/log/uwsgi.log  /var/run/uwsgi/uwsgi.pid /var/run/nginx/nginx.pid


